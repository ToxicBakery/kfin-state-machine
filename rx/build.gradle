plugins {
    id 'kotlin-multiplatform'
    id 'maven-publish'
    id 'com.github.salomonbrys.gradle.kotlin.js.mpp-tests.node'
    id 'signing'
    id 'org.jetbrains.dokka'
    id 'jacoco'
    id 'nl.fabianm.kotlin.plugin.generated' version '1.3.2'
}

jacoco {
    toolVersion = jacoco_version
}

kotlin {
    targets {
        fromPreset(presets.jvm, 'jvm') {
            compilations.all {
                tasks[compileKotlinTaskName].kotlinOptions {
                    jvmTarget = '1.6'
                }
            }
            mavenPublication {
                artifactId = 'kfin-jvmRx'
            }
        }
    }

    sourceSets {
        commonMain {
            dependencies {
                api project(':kfin')
                implementation 'org.jetbrains.kotlin:kotlin-stdlib-common'
                implementation 'org.jetbrains.kotlin:kotlin-reflect'
            }
        }
        commonTest {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-test-common'
                implementation 'org.jetbrains.kotlin:kotlin-test-annotations-common'
            }
        }
        jvmMain {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-stdlib'
                implementation "io.reactivex.rxjava2:rxjava:$rxjava_version"
            }
        }
        jvmTest {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-test-junit'
            }
        }
    }
}

task jacocoTestReportJvm(type: JacocoReport) {
    classDirectories.from(files(
            "$buildDir/classes/kotlin/common/main",
            "$buildDir/classes/kotlin/jvm/main"
    ))
    sourceDirectories.from(files(
            "src/commonMain/kotlin",
            "src/jvmMain/kotlin"
    ))
    executionData.from(files(
            "$buildDir/jacoco/jvmTest.exec"
    ))

    reports {
        xml.enabled = true
        xml.destination file("${buildDir}/reports/jacoco/report.xml")
        html.enabled = true
    }
}

task dokkaCommon(type: org.jetbrains.dokka.gradle.DokkaTask) {
    impliedPlatforms = ["Common"]
    kotlinTasks { [] }
    outputFormat = 'html'
    outputDirectory = "$buildDir/javadoc/common"
    sourceRoot {
        path = kotlin.sourceSets.commonMain.kotlin.srcDirs[0]
        platforms = ["Common"]
    }
}

task dokkajvm(type: org.jetbrains.dokka.gradle.DokkaTask) {
    impliedPlatforms = ["JVM", "Common"]
    kotlinTasks { [] }
    outputFormat = 'html'
    outputDirectory = "$buildDir/javadoc/jvm"
    sourceRoot {
        path = kotlin.sourceSets.commonMain.kotlin.srcDirs[0]
        platforms = ["Common"]
    }
    sourceRoot {
        path = kotlin.sourceSets.jvmMain.kotlin.srcDirs[0]
        platforms = ["JVM"]
    }
}

task emptySourcesJar(type: Jar) {
    classifier = 'sources'
}

task dokkaJavadocCommonJar(type: Jar, dependsOn: dokkaCommon) {
    classifier = 'javadoc'
    from "$buildDir/javadoc/common"
}

task dokkaJavadocjvmJar(type: Jar, dependsOn: dokkajvm) {
    classifier = 'javadoc'
    from "$buildDir/javadoc/jvm"
}

publishing {
    publications.all {
        pom.withXml {
            def root = asNode()

            root.children().last() + {
                resolveStrategy = DELEGATE_FIRST

                description POM_DESCRIPTION
                name POM_NAME
                url POM_URL
                scm {
                    url POM_SCM_URL
                    connection POM_SCM_CONNECTION
                    developerConnection POM_SCM_DEV_CONNECTION
                }
                licenses {
                    license {
                        name POM_LICENCE_NAME
                        url POM_LICENCE_URL
                        distribution POM_LICENCE_DIST
                    }
                }
                developers {
                    developer {
                        id POM_DEVELOPER_ID
                        name POM_DEVELOPER_NAME
                        email POM_DEVELOPER_EMAIL
                        organization POM_DEVELOPER_ORGANIZATION
                        organizationUrl POM_DEVELOPER_ORGANIZATION_URL
                    }
                }
            }
        }
    }

    afterEvaluate { project ->
        publications.getByName('jvm') {
            artifact dokkaJavadocjvmJar
        }
        publications.getByName('kotlinMultiplatform') {
            artifact dokkaJavadocCommonJar
            artifact emptySourcesJar
        }
        publications.getByName('metadata') {
            artifact dokkaJavadocCommonJar
        }
    }

    repositories {
        def releaseUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
        def snapshotUrl = "https://oss.sonatype.org/content/repositories/snapshots"

        maven {
            url !version.contains("SNAPSHOT") ? releaseUrl : snapshotUrl
            credentials {
                username System.getenv('SONATYPE_USERNAME') ?: ""
                password System.getenv('SONATYPE_PASSWORD') ?: ""
            }
        }
    }
}

signing {
    required false
    sign publishing.publications
}

build.dependsOn 'jacocoTestReportJvm'
publish.dependsOn assemble
publishToMavenLocal.dependsOn assemble
